---
interface Props {
    url: string;
}

import { getBackendUrl } from '../utils/env';

const { url } = Astro.props as Props;
const jwt = await Astro.cookies.get('jwt')?.value || '';

const tours = await fetch(url, {
    headers: {
        Cookie: `jwt=${jwt}`,
    },
}).then((res) => res.json()).then((data) => data.tours).catch((err) => {
    console.error(err);
    return [];
});

interface Tour {
    name: string;
    imageCover: string;
    difficulty: string;
    duration: number;
    summary: string;
    startLocation: {
        description: string;
    };
    startDates: string[];
    locations: any[];
    maxGroupSize: number;
    price: number;
    ratingsAverage: number;
    ratingsQuantity: number;
    slug: string;
}

const difficulties = ['easy', 'medium', 'difficult'];
--- 

<div class="flex flex-col md:flex-row md:items-start gap-8 w-full">
  <!-- Filtros -->
  <div class="w-full md:w-auto md:min-w-[220px] md:max-w-xs">
    <form id="filters" class="bg-white rounded-lg shadow p-4 mb-8 md:mb-0 sticky top-4 z-10">
      <label class="block mb-2 font-semibold text-primary">Price (max)</label>
      <input type="range" id="priceFilter" min="0" max="2000" step="50" value="2000" class="w-full mb-4" />
      <span id="priceValue" class="block mb-4 text-gray-700">$2000</span>
      <label class="block mb-2 font-semibold text-primary">Difficulty</label>
      <select id="difficultyFilter" class="w-full mb-2 rounded border-gray-300">
        <option value="">All</option>
        {difficulties.map(d => <option value={d}>{d.charAt(0).toUpperCase() + d.slice(1)}</option>)}
      </select>
    </form>
  </div>

  <!-- Tarjetas de tours -->
  <div id="tours-list" class="flex-1 min-w-0 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
    {tours?.map((tour: Tour) => (
      <div class="tour-card bg-white rounded-lg shadow-lg overflow-hidden" data-price={tour.price} data-difficulty={tour.difficulty}>
        <!-- Card Header -->
        <div class="relative">
            <div class="absolute inset-0 bg-gradient-to-br from-primary/80 to-primary/80 opacity-0 hover:opacity-100 transition-opacity duration-300"></div>
            <img 
                src={`${getBackendUrl()}/img/tours/${tour.imageCover}`} 
                alt={tour.name}
                class="w-full h-64 object-cover"
            />
            <h3 class="absolute bottom-0 right-0 bg-primary text-white text-xl font-bold px-6 py-2">
                {tour.name}
            </h3>
        </div>

        <!-- Card Details -->
        <div class="p-6">
            <h4 class="text-primary text-lg font-semibold mb-4">
                {`${tour.difficulty.toUpperCase()} ${tour.duration} - DAY TOUR`}
            </h4>
            <p class="text-gray-600 mb-6">
                {tour.summary}
            </p>

            <!-- Card Data -->
            <div class="grid grid-cols-2 gap-4 mb-6">
                <div class="flex items-center gap-2">
                    <svg class="w-6 h-6 text-green-500">
                        <use href="/img/icons.svg#icon-map-pin" />
                    </svg>
                    <span class="text-gray-600">{tour.startLocation.description}</span>
                </div>
                <div class="flex items-center gap-2">
                    <svg class="w-6 h-6 text-primary">
                        <use href="/img/icons.svg#icon-calendar" />
                    </svg>
                    <span class="text-gray-600">
                        {new Date(tour.startDates[0]).toLocaleString('en-us', { month: 'long', year: 'numeric' })}
                    </span>
                </div>
                <div class="flex items-center gap-2">
                    <svg class="w-6 h-6 text-primary">
                        <use href="/img/icons.svg#icon-flag" />
                    </svg>
                    <span class="text-gray-600">{tour.locations.length} stops</span>
                </div>
                <div class="flex items-center gap-2">
                    <svg class="w-6 h-6 text-primary">
                        <use href="/img/icons.svg#icon-user" />
                    </svg>
                    <span class="text-gray-600">{tour.maxGroupSize} people</span>
                </div>
            </div>

            <!-- Card Footer -->
            <div class="flex justify-between items-center pt-6 border-t border-gray-200">
                <div>
                    <p class="text-gray-600">
                        <span class="text-primary font-bold">${tour.price}</span>
                        <span class="text-gray-500"> per person</span>
                    </p>
                    <p class="text-gray-600">
                        <span class="text-primary font-bold">{tour.ratingsAverage}</span>
                        <span class="text-gray-500"> rating ({tour.ratingsQuantity})</span>
                    </p>
                </div>
                <a 
                    href={`/tour/${tour.slug}`}
                        class="inline-block bg-primary text-white px-6 py-2 rounded-full hover:bg-primary/80 transition-colors"
                >
                    Details
                </a>
            </div>
        </div>
      </div>
    ))}
  </div>
</div>

<script>
  // Filtro automÃ¡tico de tours
  const priceInput = document.getElementById('priceFilter') as HTMLInputElement | null;
  const priceValue = document.getElementById('priceValue') as HTMLSpanElement | null;
  const difficultyInput = document.getElementById('difficultyFilter') as HTMLSelectElement | null;
  const tourCards = document.querySelectorAll('.tour-card');

  function filterTours() {
    if (!priceInput || !priceValue || !difficultyInput) return;
    const maxPrice = parseInt(priceInput.value, 10);
    const difficulty = difficultyInput.value;
    priceValue.textContent = `$${maxPrice}`;
    tourCards.forEach(card => {
      const price = parseInt(card.getAttribute('data-price') || '0', 10);
      const diff = card.getAttribute('data-difficulty') || '';
      const show = price <= maxPrice && (!difficulty || diff === difficulty);
      (card as HTMLElement).style.display = show ? '' : 'none';
    });
  }

  priceInput?.addEventListener('input', filterTours);
  difficultyInput?.addEventListener('change', filterTours);
  window.addEventListener('DOMContentLoaded', filterTours);
</script>
